plugins {
	id 'org.springframework.boot' version '2.6.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java-library'
    id 'maven-publish'
    id 'signing'
}

ext {
	set('springCloudVersion', '2021.0.1')
	set('springCloudAlibabaVersion', '2021.0.1.0')
	set('wrenchVersion', '1.1.3')
}

allprojects {
	group = 'io.github.maodua'
	version = '1.0.2'

	java {
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
		withJavadocJar()
		withSourcesJar()
	}
	repositories {
		mavenLocal()
		maven { url 'https://maven.aliyun.com/nexus/content/groups/public' }
		maven { url 'https://maven.aliyun.com/nexus/content/repositories/gradle-plugin' }
		mavenCentral()
		// spring ‰ªìÂ∫ì
		maven { url 'https://repo.spring.io/milestone' }
		maven { url 'https://repo.spring.io/snapshot' }
	}
}

subprojects {
	apply plugin: 'java-library'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.springframework.boot'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
			mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
		}
	}

    jar {
        enabled = true
        // jarÊñá‰ª∂Âêç‰∏≠Âà†Èô§ `plain` ÂêéÁºÄ
        archiveClassifier.set("")
    }
    bootJar {
        enabled = false
    }

    // java ÁºñÁ†Å
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.warnings = false
        options.deprecation = true
        options.compilerArgs += ["-parameters"]
    }

    test {
        // ‰ΩøÁî®JUnitÂπ≥Âè∞
        useJUnitPlatform()
    }

	dependencies {

		api                     'org.springframework.boot:spring-boot-starter'

		api 					'org.springframework.cloud:spring-cloud-starter-bootstrap'
		api						'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config'
		api					 	('com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery'){
			exclude group: 'org.springframework.cloud', module:'spring-cloud-starter-netflix-ribbon'
		}
		api						'org.springframework.cloud:spring-cloud-starter-openfeign'
		api 					'org.springframework.cloud:spring-cloud-loadbalancer'

        annotationProcessor     "org.springframework.boot:spring-boot-configuration-processor"
        compileOnly             "org.springframework.boot:spring-boot-configuration-processor"

		testImplementation		'org.springframework.boot:spring-boot-starter-test'

		// lombok
		annotationProcessor     'org.projectlombok:lombok'
		compileOnly             'org.projectlombok:lombok'
		testAnnotationProcessor 'org.projectlombok:lombok'
		testCompileOnly         'org.projectlombok:lombok'
	}

    // ÂèëÁâà
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                pom {
                    name = 'wrench-cloud'
                    description = 'üîß ÊãßËû∫‰∏ùÁöÑÂ•ΩÊâ≥Êâã'
                    url = 'https://github.com/maodua/wrench-cloud'

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    // ÂºÄÂèëËÄÖ‰ø°ÊÅØ
                    developers {
                        developer {
                            id = 'sch'
                            name = 'shanchanghui'
                            email = 'changhui.shan@qq.com'
                        }
                    }
                    // SCMÈÖçÁΩÆ
                    scm {
                        connection = 'scm:git:git://github.com/maodua/wrench-cloud.git'
                        developerConnection = 'scm:git:ssh://github.com:maodua/wrench-cloud.git'
                        url = 'https://github.com/maodua/wrench-cloud/tree/main'
                    }
                }
            }
        }
        // ‰ªìÂ∫ì‰ø°ÊÅØ
        repositories {
            maven {
                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username ossrh_username
                    password ossrh_password
                }
            }
        }

    }

    // Á≠æÂêç
    signing {
        sign publishing.publications.mavenJava
    }

    javadoc {
        // Èò≤Ê≠¢Êú¨Âú∞ÊâìÂºÄ‰∏≠Êñá‰π±Á†Å
        options.addStringOption("charset", "UTF-8")
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }


}









